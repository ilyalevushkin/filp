(defun f3_last (lst)
    (car (last lst))
)

(defun f3_reverse (lst)
    (car (reverse lst))
)

(defun f3_recursion (lst)
    (cond ((Null (cdr lst)) lst)
        (T (f3_recursion (cdr lst)))
    )
)

;------------------------------------------------------------

(defun f4_reverse (lst)
    (reverse (cdr (reverse lst)))
)

(defun f4_recursion (lst)
    (cond ((Null (cdr lst)) Nil)
        (T (cons (car lst) (f4_recursion (cdr lst))))
    )
)

;------------------------------------------------------------


(defun play ()
    (let ((flip (list (+ (random 6) 1) (+ (random 6) 1) ) ))
        (cond ((and (equal (car flip) 1) (equal (cadr flip) 1)) (cons flip (play)))
              ((and (equal (car flip) 6) (equal (cadr flip) 6)) (cons flip (play)))
              (T (cons flip Nil))
        )
    )
)

(defun get_last_sum (player)
    (+ (caar (last player)) (cadar (last player)))
)

(defun game ()
    (let* ((player1 (play) )
            (player1_last_sum (get_last_sum player1))
          )
            (cond ( (or (equal player1_last_sum 7) (equal player1_last_sum 11))
                    `(,(print 'Winner1)
                      ,(print `(Player1 ,player1))
                     )
                  )
                (T (let* ((player2 (play ) )
                            (player2_last_sum (get_last_sum player2))
                         )
                            (cond ((or (equal player2_last_sum 7) (equal player2_last_sum 11))
                                    `(,(print 'Winner2)
                                      ,(print `(Player1 ,player1))
                                      ,(print `(Player2 ,player2))
                                     )
                                  )
                                (T (cond ((equal player1_last_sum player2_last_sum)
                                            `(
                                                ,(print 'Draw)
                                                ,(print `(Player1 ,player1))
                                                ,(print `(Player2 ,player2))
                                            )
                                        )
                                        ((< player1_last_sum player2_last_sum)
                                            `(
                                                ,(print 'Winner2)
                                                ,(print `(Player1 ,player1))
                                                ,(print `(Player2 ,player2))
                                            )
                                        )
                                        (T
                                            `(
                                                ,(print 'Winner1)
                                                ,(print `(Player1 ,player1))
                                                ,(print `(Player2 ,player2))
                                            )
                                        )
                                    )
                                )
                            )
                    )
                )
            )
    )
)